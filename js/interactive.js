// Generated by CoffeeScript 1.12.7
(function() {
  (function($) {
    var active_turn, current_turn, file, filePrefix, leaflet, loadEverything, setupMenus, zaxis;
    file = 2;
    current_turn = -1;
    active_turn = -1;
    zaxis = 0;
    leaflet = true;
    $(function() {
      return window.wuasCallback(function() {
        current_turn = window.wuas().current_turn;
        if (window.thisTurnData() != null) {
          return loadEverything();
        } else {
          return $("#interactive-content").html("<h1>Oops!</h1>\n<blockquote>\n    Turn " + (window.getActiveTurn()) + " is not available. Please go back and\n    select another turn.\n</blockquote>");
        }
      });
    });
    filePrefix = function() {
      switch (file) {
        case 0:
          return "";
        case 1:
          return "n";
        case 2:
          return "z";
      }
    };
    setupMenus = function() {
      var _contents, doFileElem, doTurnElem, doZElem, doZoomElem, ff, files, tt, turn, turns, zaxes, zooms, zz;
      turn = window.getActiveTurn();
      doZoomElem = function(zz) {
        var norm;
        norm = zz === "On";
        if (leaflet === norm) {
          return "" + zz;
        } else {
          return "<a href='interactive.php?zoom=" + norm + "&file=" + file + "&turn=" + turn + "&z=" + zaxis + "'>" + zz + "</a>";
        }
      };
      doFileElem = function(ff) {
        if (("" + file) === ("" + ff)) {
          return "" + ff;
        } else {
          return "<a href='interactive.php?zoom=" + leaflet + "&file=" + ff + "'>" + ff + "</a>";
        }
      };
      doTurnElem = function(tt) {
        if (("" + turn) === ("" + tt)) {
          return "" + turn;
        } else {
          return "<a href='interactive.php?zoom=" + leaflet + "&file=" + file + "&turn=" + tt + "&z=0'>" + tt + "</a>";
        }
      };
      doZElem = function(zz) {
        if (("" + zaxis) === ("" + zz)) {
          return "" + zz;
        } else {
          return "<a href='interactive.php?zoom=" + leaflet + "&file=" + file + "&turn=" + turn + "&z=" + zz + "'>" + zz + "</a>";
        }
      };
      zooms = (function() {
        var i, len, ref, results;
        ref = ["On", "Off"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          zz = ref[i];
          results.push(doZoomElem(zz));
        }
        return results;
      })();
      $("#zoom-menu").html("Zoom = " + (zooms.join(' | ')));
      files = (function() {
        var i, len, ref, results;
        ref = [0, 1, 2];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          ff = ref[i];
          results.push(doFileElem(ff));
        }
        return results;
      })();
      $("#file-menu").html("File = " + (files.join(' | ')));
      turns = (function() {
        var ref, results;
        ref = window.wuas().turns;
        results = [];
        for (tt in ref) {
          _contents = ref[tt];
          if (tt <= current_turn) {
            results.push(doTurnElem(tt));
          }
        }
        return results;
      })();
      $("#turn-menu").html("Turn = " + (turns.join(' | ')));
      zaxes = (function() {
        var ref, results;
        ref = window.thisTurnSansZ();
        results = [];
        for (zz in ref) {
          _contents = ref[zz];
          results.push(doZElem(zz));
        }
        return results;
      })();
      return $("#axis-menu").html("Z = " + (zaxes.join(' | ')));
    };
    loadEverything = function() {
      var bounds, div, id, img, itemDescriptor, loaded, map, suffix, tokenDescriptor, turn, url;
      tokenDescriptor = function(token) {
        var thumbnail, xpos, ypos;
        thumbnail = "";
        if (token.thumbnail != null) {
          xpos = -token.thumbnail[0];
          ypos = -token.thumbnail[1];
          thumbnail = "<div style='width: 16px; height: 16px; background-image: url(\"" + (window.fileStruct().tokens) + "\");";
          thumbnail = thumbnail + " background-position: " + xpos + "px " + ypos + "px; display: inline-block' /> ";
        }
        return "<dt>" + thumbnail + "<b>" + token.name + "</b> <i>(" + token.stats + ")</i></dt><dd>" + token.desc + "</dd>";
      };
      itemDescriptor = function(item) {
        return "<dt><b>" + item.name + "</b></dt><dd>" + item.desc + "</dd>";
      };
      setupMenus();
      window.fillInHeader();
      turn = window.getActiveTurn();
      div = $("#interactive-content");
      suffix = "_" + zaxis;
      if (zaxis === 0) {
        suffix = "";
      }
      id = null;
      div.html("<div id=\"image-map\">\n</div>\n<div id=\"int-space\" style=\"min-height:4em\"></div>\n<div id=\"int-token\" style=\"min-height:10em\"></div>");
      map = null;
      url = (filePrefix()) + "turn" + turn + suffix + ".png";
      img = $("<img id='game-map' />");
      bounds = null;
      loaded = false;
      if (leaflet) {
        map = L.map('image-map', {
          minZoom: 1,
          maxZoom: 4,
          center: [0, 0],
          zoom: 3,
          crs: L.CRS.Simple
        });
        img.attr('src', url);
        $('#image-map').css('width', '640px');
        $('#image-map').css('height', '480px');
        $('#image-map').css('border', '1px solid');
        img.on('load', function() {
          bounds = new L.LatLngBounds(map.unproject([0, img[0].height], map.getMaxZoom() - 1), map.unproject([img[0].width, 0], map.getMaxZoom() - 1));
          loaded = true;
          L.imageOverlay(url, bounds).addTo(map);
          return map.setMaxBounds(bounds);
        });
        id = "#image-map";
      } else {
        $("#image-map").html("<img id='game-map' src=" + url + " />");
        id = "#image-map";
      }
      return $(id).mousemove(function(e) {
        var data, dist_x, dist_y, i, len, now, obj, offset, ref, rel_x, rel_x1, rel_y, rel_y1, spaces, the_space, threshold, token_data, tx, ty, x0, y0;
        rel_x1 = null;
        rel_y1 = null;
        spaces = window.thisTurnData().spaces;
        if (leaflet) {
          if (!loaded) {
            return;
          }
          offset = $('.leaflet-image-layer').offset();
          rel_x = e.pageX - offset.left;
          rel_y = e.pageY - offset.top;
          rel_x1 = rel_x * img[0].width / $('.leaflet-image-layer')[0].width;
          rel_y1 = rel_y * img[0].height / $('.leaflet-image-layer')[0].height;
        } else {
          offset = $(this).offset();
          rel_x1 = e.pageX - offset.left;
          rel_y1 = e.pageY - offset.top;
        }
        x0 = Math.floor(rel_x1 / 32);
        y0 = Math.floor(rel_y1 / 32);
        now = spaces;
        now && (now = now[y0]);
        now && (now = now[x0]);
        if (now != null) {
          the_space = window.wuas().spaces[now];
          $("#int-space").html("<dl>\n    <dt><b>" + the_space.name + "</b> <i>(" + the_space.visual + ")</i></dt>\n    <dd>" + the_space.desc + "</dd>\n</dl>");
        } else {
          $("#int-space").html("");
        }
        token_data = "";
        ref = window.thisTurnData().tokens;
        for (i = 0, len = ref.length; i < len; i++) {
          obj = ref[i];
          dist_x = rel_x1 - obj.position[0];
          dist_y = rel_y1 - obj.position[1];
          data = window.wuas().tokens[obj.object] || window.wuas().items[obj.object];
          threshold = 'span' in data ? data['span'] : [1, 1];
          tx = threshold[0] * 16;
          ty = threshold[1] * 16;
          if ((0 <= dist_x && dist_x < tx) && (0 <= dist_y && dist_y < ty)) {
            if (window.wuas().tokens[obj.object] != null) {
              token_data += tokenDescriptor(data);
            } else if (window.wuas().items[obj.object] != null) {
              token_data += itemDescriptor(data);
            }
          }
        }
        return $("#int-token").html("<dl>" + token_data + "</dl>");
      });
    };
    window.getActiveTurn = function() {
      if (active_turn === -1) {
        return current_turn;
      } else {
        return active_turn;
      }
    };
    window.setActiveTurn = function(f, x, y, z) {
      file = f;
      active_turn = x;
      zaxis = y;
      return leaflet = !!z;
    };
    window.thisTurnSansZ = function() {
      var turn;
      turn = window.getActiveTurn();
      return window.wuas().turns["" + turn];
    };
    return window.thisTurnData = function() {
      var turn;
      turn = window.getActiveTurn();
      return window.wuas().turns["" + turn]["" + zaxis];
    };
  })(jQuery);

}).call(this);
