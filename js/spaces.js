// Generated by CoffeeScript 1.12.7
(function() {
  (function($) {
    var cb, file_number, file_struct, initFileStruct, listOut, listOutValsWithNames, listOutWithEntry, listOutWithNames, setupSpaceMap, spaceMapLine, wuas;
    wuas = null;
    file_number = -1;
    file_struct = {};
    cb = [];
    window.loadData = function(file) {
      file_number = file;
      file_struct = initFileStruct();
      return $.ajax({
        url: file_struct.json,
        dataType: "json",
        success: function(data, _0, _1) {
          var f, i, len, results1;
          wuas = data;
          $("#wuas-space-map").html("<img src=\"" + file_struct.spaces + "\" usemap=\"#spaces-map\" />\n<map name=\"spaces-map\" id=\"spaces-map\">\n</map>");
          setupSpaceMap();
          listOutValsWithNames(wuas.items, $("#wuas-items"));
          listOutWithNames(wuas.effects, $("#wuas-effects"));
          listOutWithEntry(wuas.tokens, $("#wuas-tokens"));
          listOut(wuas.rulings, $("#wuas-rulings"));
          $("#search-field").bind("change input keyup paste", function() {
            return window.updateSearch('wuas-search-results', 'search-field');
          });
          results1 = [];
          for (i = 0, len = cb.length; i < len; i++) {
            f = cb[i];
            results1.push(f());
          }
          return results1;
        }
      });
    };
    initFileStruct = function() {
      return file_struct = (function() {
        switch (file_number) {
          case 0:
            return {
              json: "../wuas_old.json",
              spaces: "./spaces_old.png",
              tokens: "./tokens_old.png"
            };
          case 1:
            return {
              json: "../wuas.json",
              spaces: "./spaces.png",
              tokens: "./tokens.png"
            };
          case 2:
            return {
              json: "../wuas_new.json",
              spaces: "./spaces_new.png",
              tokens: "./tokens_new.png"
            };
        }
      })();
    };
    spaceMapLine = function(key, data) {
      var area;
      area = $("<area/>");
      area.attr("coords", data.coords);
      area.attr("href", "javascript:void(0)");
      area.on("click", function(e) {
        e.preventDefault();
        return window.putEffectText($("#space-effect-text"), key);
      });
      return $("#spaces-map").append(area);
    };
    setupSpaceMap = function() {
      var key, ref, results1, value;
      ref = wuas.spaces;
      results1 = [];
      for (key in ref) {
        value = ref[key];
        results1.push(spaceMapLine(key, value));
      }
      return results1;
    };
    listOut = function(list, jqObj) {
      var i, len, obj, ul;
      ul = $("<ul></ul>");
      for (i = 0, len = list.length; i < len; i++) {
        obj = list[i];
        ul.append($("<li>" + obj.desc + "</li>"));
      }
      jqObj.html('');
      return jqObj.append(ul);
    };
    listOutWithNames = function(list, jqObj) {
      var dl, i, len, obj;
      dl = $("<dl></dl>");
      for (i = 0, len = list.length; i < len; i++) {
        obj = list[i];
        dl.append($("<dt><b>" + obj.name + "</b></dt><dd>" + obj.desc + "</dd>"));
      }
      jqObj.html('');
      return jqObj.append(dl);
    };
    listOutValsWithNames = function(list, jqObj) {
      var dl, key, obj;
      dl = $("<dl></dl>");
      for (key in list) {
        obj = list[key];
        dl.append($("<dt><b>" + obj.name + "</b></dt><dd>" + obj.desc + "</dd>"));
      }
      jqObj.html('');
      return jqObj.append(dl);
    };
    listOutWithEntry = function(list, jqObj) {
      var dl, key, name, obj, spanx, spany, xpos, ypos;
      dl = $("<dl></dl>");
      for (key in list) {
        obj = list[key];
        name = "";
        if (obj.thumbnail != null) {
          xpos = -obj.thumbnail[0];
          ypos = -obj.thumbnail[1];
          spanx = 1;
          spany = 1;
          if ('span' in obj) {
            spanx = obj.span[0];
            spany = obj.span[1];
          }
          spanx *= 16;
          spany *= 16;
          name = "<div style='width: " + spanx + "px; height: " + spany + "px;\n    background-image: url(\"" + file_struct.tokens + "\");\n    background-position: " + xpos + "px " + ypos + "px; display: inline-block' />\n<b>" + obj.name + "</b>";
        }
        dl.append($("<dt>" + name + " <i>(" + obj.stats + ")</i></dt><dd>" + obj.desc + "</dd>"));
      }
      jqObj.html('');
      return jqObj.append(dl);
    };
    window.putEffectText = function(jqObj, id) {
      var desc, name, spaces, str, visual;
      if (wuas != null) {
        spaces = wuas.spaces;
        name = spaces[id].name;
        visual = spaces[id].visual;
        desc = spaces[id].desc;
        str = "<b>" + name + "</b> <i>(" + visual + ")</i><br/>\n<blockquote>" + desc + "</blockquote>";
        return jqObj.html(str);
      }
    };
    window.updateSearch = function(divId, textId) {
      var divField, dl, effect, i, item, j, key, len, len1, ref, ref1, ref2, ref3, result, results, space, text, textField, token, tokenDescriptor;
      tokenDescriptor = function(token) {
        var thumbnail, xpos, ypos;
        thumbnail = "";
        if (token.thumbnail != null) {
          xpos = -token.thumbnail[0];
          ypos = -token.thumbnail[1];
          thumbnail = "<div style='width: 16px; height: 16px;\n    background-image: url(\"" + file_struct.tokens + "\");\n    background-position: " + xpos + "px " + ypos + "px; display: inline-block' />";
        }
        return "<dt>" + thumbnail + "<b>" + token.name + "</b> <i>(" + token.stats + ")</i></dt><dd>" + token.desc + "</dd>";
      };
      divField = $("#" + divId);
      textField = $("#" + textId);
      text = textField.val().toLowerCase();
      if (wuas != null) {
        results = [];
        ref = wuas.spaces;
        for (key in ref) {
          space = ref[key];
          if (space.name.toLowerCase().includes(text)) {
            results.push("<dt><b>" + space.name + "</b> <i>(" + space.visual + ")</i></dt><dd>" + space.desc + "</dd>");
          }
        }
        ref1 = wuas.items;
        for (key in ref1) {
          item = ref1[key];
          if (item.name.toLowerCase().includes(text)) {
            results.push("<dt><b>" + item.name + "</b></dt><dd>" + item.desc + "</dd>");
          }
        }
        ref2 = wuas.effects;
        for (i = 0, len = ref2.length; i < len; i++) {
          effect = ref2[i];
          if (effect.name.toLowerCase().includes(text)) {
            results.push("<dt><b>" + effect.name + "</b></dt><dd>" + effect.desc + "</dd>");
          }
        }
        ref3 = wuas.tokens;
        for (key in ref3) {
          token = ref3[key];
          if (token.name.toLowerCase().includes(text)) {
            results.push(tokenDescriptor(token));
          }
        }
        if (results.length > 10) {
          return divField.html("Please narrow your search.");
        } else if (results.length === 0) {
          return divField.html("No results found.");
        } else {
          dl = $("<dl></dl>");
          for (j = 0, len1 = results.length; j < len1; j++) {
            result = results[j];
            dl.append($(result));
          }
          divField.html('');
          return divField.append(dl);
        }
      } else {
        return divField.html("Please wait...");
      }
    };
    window.wuas = function() {
      return wuas;
    };
    window.wuasCallback = function(f) {
      return cb.push(f);
    };
    window.fileStruct = function() {
      return file_struct;
    };
    window.fillInFooter = function() {
      var file0, file1, file2, tag_current, tag_link, tag_old;
      tag_current = "an unknown dictionary";
      tag_old = "an unknown dictionary";
      tag_link = "here";
      file0 = "<a href='index.php?file=0'>2016 Game</a>";
      file1 = "<a href='index.php?file=1'>2017 Game</a>";
      file2 = "<a href='index.php?file=2'>Current Game</a>";
      switch (file_number) {
        case 0:
          file0 = "2016 Game";
          break;
        case 1:
          file1 = "2017 Game";
          break;
        case 2:
          file2 = "Current Game";
      }
      return $("#wuas-footer-tagline").html("Available Game Dictionaries\n<ul>\n    <li>" + file0 + "</li>\n    <li>" + file1 + "</li>\n    <li>" + file2 + "</li>\n</ul>");
    };
    return window.fillInHeader = function() {
      var text;
      text = "";
      switch (file_number) {
        case 0:
          text = "Wish Upon A Star - 2016";
          break;
        case 1:
          text = "Wish Upon A Star - 2017";
          break;
        case 2:
          text = "Wish Upon A Star - 2018 (Current)";
      }
      return $("#file-header").html("<em>\n    Currently viewing: " + text + "\n</em>");
    };
  })(jQuery);

}).call(this);
